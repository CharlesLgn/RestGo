<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accueil" xml:space="preserve">
    <value>Accueil</value>
  </data>
  <data name="Auteurs" xml:space="preserve">
    <value>Auteurs</value>
  </data>
  <data name="Body" xml:space="preserve">
    <value>Corps de la requête</value>
  </data>
  <data name="btSujet" xml:space="preserve">
    <value>Voir le sujet</value>
  </data>
  <data name="Entetes" xml:space="preserve">
    <value>Entêtes</value>
  </data>
  <data name="Indication" xml:space="preserve">
    <value>Indication</value>
  </data>
  <data name="IndicationContenu" xml:space="preserve">
    <value>La partie client et la partie serveur ne sont pas forcément dans le même langage de
programmation</value>
  </data>
  <data name="IntroSujet" xml:space="preserve">
    <value>Le but de ce TP est de recréer de manière très simplifiée un navigateur web.
Le projet se composera de 2 éléments:
- une interface cliente qui fera office de navigateur. Dans ce navigateur, on aura :
- un champ de saisie pour l’url que l’on souhaite appeler,
- une liste déroulante pour sélectionner le content-type,
- une liste déroulante pour la méthode utilisée (GET, POST, etc …)
- une liste déroulante pour indiquer la langue utilisée,
- un champ texte pour envoyer des paramètres
- un bouton pour envoyer notre demande,
- un champ pour afficher le résultat (entêtes de retour et données)
- un serveur qui devra:
- interpréter la demande reçue,
- renvoyer le bon contenu en fonction des entêtes utilisés,
- indiquer le succès ou l’échec de l’opération (les codes HTTP vu en cours)
En résumé il vous est demandé de reproduire la fenêtre de débogage des requêtes HTTP que vous pouvez lancer
depuis n’importe quel navigateur en appuyant sur F12.
Votre interface cliente pourrait en théorie fonctionner en indiquant n’importe quelle url.
Je vous demanderai de développer pour la partie serveur plusieurs webservices:
- le webservice article:
- un article est composé d’un identifiant généré à la création, d’un libellé, d’un prix et de l’identifiant
d’une catégorie
- le webservice GET /articles renverra la liste des articles,
- le webservices GET /article/:id renverra un article en particulier (où :id est l’identifiant de l’article),
- le webservice POST /article créera un article,
- le webservice DELETE /article/:id supprimera un article
- le webservice catégorie:
- une catégorie est composée d’un identifiant (généré à la création), et d’un libellé,
- le webservice GET /categories renverra la liste des catégories,
- le webservices GET /catégorie/:id renverra une catégorie en particulier (où :id est l’identifiant de la
catégorie),
- le webservice POST /categorie créera une catégorie,
- le webservice DELETE /categorie/:id supprimera une catégorie
Bien entendu, l’appel à un webservice inexistant ou avec la mauvaise méthode devra renvoyer le code http
correspondant.</value>
  </data>
  <data name="LancerName" xml:space="preserve">
    <value>Lancer la requête</value>
  </data>
  <data name="Langue" xml:space="preserve">
    <value>Langue</value>
  </data>
  <data name="Livrables" xml:space="preserve">
    <value>Livrables</value>
  </data>
  <data name="Projet" xml:space="preserve">
    <value>Projet réalisé par</value>
  </data>
  <data name="Propos" xml:space="preserve">
    <value>À propos</value>
  </data>
  <data name="Reponse" xml:space="preserve">
    <value>Réponse</value>
  </data>
  <data name="Sujet" xml:space="preserve">
    <value>Sujet</value>
  </data>
  <data name="TitreSujet" xml:space="preserve">
    <value>Projet gestion avancée HTTP</value>
  </data>
  <data name="Valeur" xml:space="preserve">
    <value>Valeurs</value>
  </data>
  <data name="VisiterPage" xml:space="preserve">
    <value>Visiter la page</value>
  </data>
</root>